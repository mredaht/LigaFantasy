modifier onlyValidPlayer(string memory _nombre, string memory _equipo) {
        bool isValid = false;

        for (uint256 i = 0; i < jugadores.length; i++) {
            if (
                keccak256(abi.encodePacked(jugadores[i].nombre)) ==
                keccak256(abi.encodePacked(_nombre)) &&
                keccak256(abi.encodePacked(jugadores[i].equipo)) ==
                keccak256(abi.encodePacked(_equipo))
            ) {
                isValid = true;
                break;
            }
        }

        require(isValid, "Jugador no valido: nombre y equipo no coinciden");
        _;
    }

 /*     struct Jornada {
        uint256 idJornada;
        uint256[] jugadoresSeleccionados;
        Status status;
    } */

    //Jornada[] jornadas;
    
NFT---------------------
// Mapeo de jornada a jugadores seleccionados
    mapping(uint256 => mapping(uint256 => bool))
        public jugadorSeleccionadoEnJornada;


    function updateScore(uint256 tokenId, uint256 _score) external onlyOwner {
        require(ownerOf(tokenId) != address(0), "Player does not exist");
        jugadores[tokenId].puntuacion = _score;
    }

    //Posible funcion para evitar que un jugador se seleccione dos veces
    function seleccionarJugador(uint256 jornada, uint256 tokenId) external {
        require(
            !jugadorSeleccionadoEnJornada[jornada][tokenId],
            "Jugador ya seleccionado en esta jornada"
        );

        jugadorSeleccionadoEnJornada[jornada][tokenId] = true;
    }